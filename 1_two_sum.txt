//  Solution 1: HashMap
// We need to find 2 numbers a, b so that a + b = target.
// We need a HashMap datastructure to store elements in the past, let name it seen.
// The idea is that we iterate b as each element in nums, we check if we found a (where a = target - b) in the past.
// If a exists in seen then we already found 2 numbers a and b, so that a + b = target, just output their indices.
// Else add b to the seen.

// Complexity

// Time: O(N), where N <= 10^4 is number of elements in the array nums.
// Space: O(N)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> seen = new HashMap<>();
        for (int i = 0; i < nums.length; ++i) {
            int b = nums[i], a = target - b;
            if (seen.containsKey(a)) return new int[]{seen.get(a), i}; // Found pair of (a, b), so that a + b = target
            seen.put(b, i);
        }
        return new int[]{};
    }
}